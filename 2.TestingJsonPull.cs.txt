using AllArt.Solana.Example;
using Solnet.Rpc.Models;
using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using Solnet.Rpc;
using LitJson;
using System;
using UnityEngine.Networking;

public static class TextureExtentions
{
    public static Texture2D ToTexture2D(this Texture texture)
    {
        return Texture2D.CreateExternalTexture(
            texture.width,
            texture.height,
            TextureFormat.RGB24,
            false, false,
            texture.GetNativeTexturePtr());
    }
}
public class TestingJsonPull : MonoBehaviour
{
     CharacterCustomization _characterCustomization;

    public Button nftSelect_btn;

    public NftJson nftJson;

    public GameObject test;

    // downloaded image
    Texture myTexture;


    private void Start()
    {
        _characterCustomization = FindObjectOfType<CharacterCustomization>();

        nftSelect_btn?.onClick.AddListener(() =>
        {
            CustomizeCharacter(nftJson);
        });
    }

    private void Awake()
    {
        //StartCoroutine(getData());
    }
    public void GetDataRoute( string jsonurl)
    {
        StartCoroutine(getData(jsonurl));
    }

    IEnumerator getData(string jasonUrl)
    {
        Debug.Log("Processing data , please wait ......");

        WWW _www = new WWW(jasonUrl);
        yield return _www;

        if(_www.error == null)
        {
            processJasonData(_www.text);
            Debug.Log(_www.text);
        }
        else
        {
            Debug.Log(" url not working, something went wrong");
        }
    }


    private void processJasonData( string _url)
    {
        jsonJson _jsonJson = JsonUtility.FromJson<jsonJson>(_url);
        Debug.Log(_jsonJson.data.metadata.data.uri);
        StartCoroutine(getNftData(_jsonJson.data.metadata.data.uri));
    }

    IEnumerator getNftData(string _nftUrl)
    {
        Debug.Log("Processing data , please wait ......");

        WWW _www = new WWW(_nftUrl);
        yield return _www;

        if (_www.error == null)
        {
            Debug.Log(_www.text);
            processNftData(_www.text);
        }
        else
        {
            Debug.Log(" url not working, something went wrong");
        }

    }

    private void processNftData(string _nftUrl)
    {
        nftJson = JsonUtility.FromJson<NftJson>(_nftUrl);
        Debug.Log(nftJson.image);

        //t
        StartCoroutine(GetTexture(nftJson.image));
        //t
    }
    IEnumerator GetTexture( string nftUrl)
    {
        UnityWebRequest www = UnityWebRequestTexture.GetTexture(nftUrl);
        yield return www.SendWebRequest();

        if (www.result != UnityWebRequest.Result.Success)
        {
            Debug.Log(www.error);
        }
        else
        {
             myTexture = ((DownloadHandlerTexture)www.downloadHandler).texture;

            Texture2D texture2D = myTexture.ToTexture2D();

            Sprite mySprite = Sprite.Create(texture2D, new Rect(0.0f, 0.0f, myTexture.width, myTexture.height), new Vector2(0.5f, 0.5f), 100.0f);
            this.GetComponent<Image>().sprite = mySprite;
           
        }
    }

    public void CustomizeCharacter(NftJson nftJson)
    {
        // display and enable attributes
        foreach (GameObject y in _characterCustomization.bodyParts)
        {

            y.SetActive(false);

        }

        foreach (AttriList x in nftJson.attributes)
        {
            Debug.Log(x.trait_type);
            Debug.Log(x.value);

            

            foreach (GameObject y in _characterCustomization.bodyParts)
            {
                if (y.name == x.value)
                {
                    y.SetActive(true);
                }
            }
        }
    }
   
}
